--- docs/pybtex_doctools/pygments.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ docs/pybtex_doctools/pygments.py	2017-01-21 13:35:39.721970326 -0700
@@ -93,7 +93,7 @@ class BibTeXLexer(ExtendedRegexLexer):
     filenames = ['*.bib']
     flags = re.IGNORECASE
 
-    IDENTIFIER = ur'[{0}][{1}]*'.format(re.escape(NAME_CHARS), re.escape(NAME_CHARS + digits))
+    IDENTIFIER = r'[{0}][{1}]*'.format(re.escape(NAME_CHARS), re.escape(NAME_CHARS + digits))
 
     def open_brace_callback(self, match, ctx):
         opening_brace = match.group()
@@ -200,7 +200,7 @@ class BSTLexer(RegexLexer):
             (r'[^#\"\{\}\s]+\$', Name.Builtin),
             (r'[^#\"\{\}\s]+', Name.Variable),
             (r'"[^\"]*"', String),
-            (ur'#-?\d+', Number),
+            (r'#-?\d+', Number),
             ('{', Text.Punctuation, ('group-end', 'body')),
             default('#pop'),
         ],
--- pybtex/backends/html.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ pybtex/backends/html.py	2017-01-21 13:36:44.306830594 -0700
@@ -72,13 +72,13 @@ class Backend(BaseBackend):
         return escape(text)
 
     def format_protected(self, text):
-        return ur'<span class="bibtex-protected">{}</span>'.format(text)
+        return r'<span class="bibtex-protected">{}</span>'.format(text)
 
     def format_tag(self, tag, text):
-        return ur'<{0}>{1}</{0}>'.format(tag, text) if text else u''
+        return r'<{0}>{1}</{0}>'.format(tag, text) if text else u''
 
     def format_href(self, url, text):
-        return ur'<a href="{0}">{1}</a>'.format(url, text) if text else u''
+        return r'<a href="{0}">{1}</a>'.format(url, text) if text else u''
 
     def write_prologue(self):
         encoding = self.encoding or pybtex.io.get_default_encoding()
--- pybtex/backends/latex.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ pybtex/backends/latex.py	2017-01-21 13:35:39.732970302 -0700
@@ -72,7 +72,7 @@ class Backend(BaseBackend):
         if tag is None:
             return u'{%s}' % text if text else u''
         else:
-            return ur'\%s{%s}' % (tag, text) if text else u''
+            return r'\%s{%s}' % (tag, text) if text else u''
 
     def format_href(self, url, text):
         if not text:
@@ -80,7 +80,7 @@ class Backend(BaseBackend):
         elif text == self.format_str(url):
             return u'\\url{%s}' % url
         else:
-            return ur'\href{%s}{%s}' % (url, text) if text else u''
+            return r'\href{%s}{%s}' % (url, text) if text else u''
 
     def format_protected(self, text):
         """
--- pybtex/backends/markdown.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ pybtex/backends/markdown.py	2017-01-21 13:35:39.732970302 -0700
@@ -109,10 +109,10 @@ class Backend(BaseBackend):
         if tag is None:
             return text
         else:
-            return ur'{0}{1}{0}'.format(tag, text) if text else u''
+            return r'{0}{1}{0}'.format(tag, text) if text else u''
 
     def format_href(self, url, text):
-        return ur'[%s](%s)' % (text, url) if text else u''
+        return r'[%s](%s)' % (text, url) if text else u''
 
     def write_entry(self, key, label, text):
         # Support http://www.michelf.com/projects/php-markdown/extra/#def-list
--- pybtex/bibtex/bst.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ pybtex/bibtex/bst.py	2017-01-21 13:35:39.733970300 -0700
@@ -44,7 +44,7 @@ def process_function(toks):
     return FunctionLiteral(toks[0])
 
 
-quote_or_comment = re.compile(ur'[%"]')
+quote_or_comment = re.compile(r'[%"]')
 def strip_comment(line):
     """Strip the commented part of the line."
 
@@ -88,9 +88,9 @@ from pybtex.scanner import (
 class BstParser(Scanner):
     LBRACE = Literal(u'{')
     RBRACE = Literal(u'}')
-    STRING = Pattern(ur'"[^\"]*"', 'string')
-    INTEGER = Pattern(ur'#-?\d+', 'integer')
-    NAME = Pattern(ur'[^#\"\{\}\s]+', 'name')
+    STRING = Pattern(r'"[^\"]*"', 'string')
+    INTEGER = Pattern(r'#-?\d+', 'integer')
+    NAME = Pattern(r'[^#\"\{\}\s]+', 'name')
 
     COMMANDS = {
         'ENTRY': 3,
--- pybtex/bibtex/names.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ pybtex/bibtex/names.py	2017-01-21 13:35:39.733970300 -0700
@@ -286,9 +286,9 @@ class UnbalancedBraceError(PybtexSyntaxE
 class NameFormatParser(Scanner):
     LBRACE = Literal(u'{')
     RBRACE = Literal(u'}')
-    TEXT = Pattern(ur'[^{}]+', 'text')
-    NON_LETTERS = Pattern(ur'[^{}\w]|\d+', 'non-letter characters', flags=re.IGNORECASE | re.UNICODE)
-    FORMAT_CHARS = Pattern(ur'[^\W\d_]+', 'format chars', flags=re.IGNORECASE | re.UNICODE)
+    TEXT = Pattern(r'[^{}]+', 'text')
+    NON_LETTERS = Pattern(r'[^{}\w]|\d+', 'non-letter characters', flags=re.IGNORECASE | re.UNICODE)
+    FORMAT_CHARS = Pattern(r'[^\W\d_]+', 'format chars', flags=re.IGNORECASE | re.UNICODE)
 
     lineno = None
 
--- pybtex/database/input/bibtex.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ pybtex/database/input/bibtex.py	2017-01-21 13:35:47.119954320 -0700
@@ -110,10 +110,10 @@ class UndefinedMacro(PybtexSyntaxError):
 
 
 class BibTeXEntryIterator(Scanner):
-    NAME = Pattern(ur'[{0}][{1}]*'.format(re.escape(NAME_CHARS), re.escape(NAME_CHARS + digits)), 'a valid name')
-    KEY_PAREN = Pattern(ur'[^\s\,]+', 'entry key')
-    KEY_BRACE = Pattern(ur'[^\s\,}]+', 'entry key')
-    NUMBER = Pattern(ur'[{0}]+'.format(digits), 'a number')
+    NAME = Pattern(r'[{0}][{1}]*'.format(re.escape(NAME_CHARS), re.escape(NAME_CHARS + digits)), 'a valid name')
+    KEY_PAREN = Pattern(r'[^\s\,]+', 'entry key')
+    KEY_BRACE = Pattern(r'[^\s\,}]+', 'entry key')
+    NUMBER = Pattern(r'[{0}]+'.format(digits), 'a number')
     LBRACE = Literal(u'{')
     RBRACE = Literal(u'}')
     LPAREN = Literal(u'(')
--- pybtex/database/output/bibtex.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ pybtex/database/output/bibtex.py	2017-01-21 13:35:51.383945095 -0700
@@ -44,7 +44,7 @@ class Writer(BaseWriter):
         {The "World"}
         >>> try:
         ...     print w.quote(r'The {World')
-        ... except BibTeXError, error:
+        ... except BibTeXError as error:
         ...     print error
         String has unmatched braces: The {World
         """
@@ -67,13 +67,13 @@ class Writer(BaseWriter):
         >>> w.check_braces('end}')
         >>> try:
         ...     w.check_braces('{')
-        ... except BibTeXError, error:
+        ... except BibTeXError as error:
         ...     print error
         String has unmatched braces: {
         >>> w.check_braces('{test}}')
         >>> try:
         ...     w.check_braces('{{test}')
-        ... except BibTeXError, error:
+        ... except BibTeXError as error:
         ...     print error
         String has unmatched braces: {{test}
 
--- pybtex/scanner.py.orig	2017-01-20 13:37:20.000000000 -0700
+++ pybtex/scanner.py	2017-01-21 13:35:52.624942410 -0700
@@ -56,8 +56,8 @@ class Scanner(object):
     text = None
     lineno = 1
     pos = 0
-    WHITESPACE = Pattern(ur'\s+', 'whitespace')
-    NEWLINE = Pattern(ur'\n|(\r\n)|\r', 'newline')
+    WHITESPACE = Pattern(r'\s+', 'whitespace')
+    NEWLINE = Pattern(r'\n|(\r\n)|\r', 'newline')
 
     def __init__(self, text, filename=None):
         self.text = text
